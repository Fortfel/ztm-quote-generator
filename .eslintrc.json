{
  "root": true,
  "env": {
    "browser": true
  },
  "plugins": ["tsdoc", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/strict-type-checked",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2021,
    "sourceType": "module",
    "projectService": "./tsconfig.json"
  },
  "ignorePatterns": ["*.config.js", "*.config.ts", "node_modules/", "dist/"],
  "rules": {
    "quotes": ["error", "single"],
    "semi": ["error", "never"],
    "no-restricted-syntax": [
      "error",
      // Ban all enums:
      {
        "selector": "TSEnumDeclaration",
        "message": "Use const assertion or a string union type instead. https://mkosir.github.io/typescript-style-guide/#enums--const-assertion"
      }
    ],
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["error", { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_" }],
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "generic",
        "readonly": "generic"
      }
    ],
    "import/no-default-export": "error",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should", "has", "can", "did", "will"]
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"]
      },
      {
        // Generic type parameter must start with letter T, followed by any uppercase letter.
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^T[A-Z]",
          "match": true
        }
      }
    ],
    "tsdoc/syntax": "warn"
  }
}
